Core Java – MCQ
1.	Which of the following is not a valid Java keyword?
a.	transient
b.	volatile
c.	auto
d.	native

2.	Which of the following Java data structures is thread-safe?
a.	ArrayList
b.	HashMap
c.	HashSet
d.	None of the above

3.	Imagine you have written a Java program using the usual Java 1.6 syntax and that there are no error in your code. What happens if you compile a Java source code that using JDK version 1.7 and run the compiled class file using JRE 1.6?
a.	The code is compiled and run successfully?
b.	You will be met with a Compile-time Exception.
c.	The code will compile but you will be met with a Runtime Exception.
d.	The code will be compiled but no .class file will be produced because you are compiling Java 1.6 code using JDK 1.7

4.	What will be result of the code below?
		public interface QuizInterface {
			public void setName(String name);
			public String getName();
		}
		public interface JavaQuizInterface implements QuizInterface {
		}	
		public class JavaQuiz implements JavaQuizInterface {
			private String name;
			@Override
    			public void setName(String name) {
        				this.name = name;
    			}
			@Override
    			public String getName() {
       				return name;
    			}
			public static void main(String[] args) {
				JavaQuiz jq = new JavaQuiz();
       				jq.setName("NIT Quiz");
				String thisQuizName = jq.getName();
				System.out.println(thisQuizName.toLowerCase());
			}
		}
a.	NIT Quiz
b.	nit quiz
c.	There will be Compile time Exception
d.	There will be a Runtime Exception
	Explanation: An interface can not implement another interface – it extends 

5.	Which of the following is not a new feature that was added in Java 1.7?
a.	String support for Switch Case.
b.	Lambda expressions (or closures) which are a short form replacement of anonymous classes.
c.	Try with resources, where an I/O stream is closed automatically when done, thereby eliminating the need of finally block in try-catch-finally.
d.	Underscore between digits in numeric literal, for example: long counter = 10000000L; can be replaced by long counter =  10_000_000L;
	Explanation: Lambda Expressions are a Java 1.8 feature

6.	You have two byte arrays
 byte[] arr1 = new byte[100000]; 
 byte[] arr2; 
arr1 contains data which is to be copied to arr2. Which of the following is the best solution (if any)?
a.	System.arraycopy(arr1, 0, arr2, 0, arr1.length);
b.	int i=0;
for( byte data : arr1){
 	arr2[i++] = data;
}
c.	for(int i=0; i<arr1.length; i++){
 	arr2[i] = arr1[i];
}
d.	All of the above are equally efficient
	Explanation: System.arraycopy uses native method call to achieve high performance

7.	What will be output of the following program?

	String[] arr1 = new String[3];

	arr1[2] = " ! ";
	arr1[0] = "Hello ";

	for(String data : arr1){
		System.out.print(data);
	}
a.	There will be a Compile Time Exception, because you can not put data in arbitrary location in an array. Data must be put serial wise.
b.	 Hello null ! 
c.	Hello  !
d.	There will be a Runtime Exception, because you can not put data in arbitrary location in an array. Data must be put serial wise.
	
8.	Which of the following is not correct about abstract classes in Java?
a.	Abstract class must be declared with the abstract keyword as a non-access modifier.
b.	An abstract class must have atleast one abstract method which must be implemented by its subclass.
c.	 An abstract class can have method implementaions like normal classes and these methods can also be overridden by its subclass.
d.	An abstract class can have static properties and methods.

9.	Java does not support multiple inheritance. In that case how would you achieve the desired results if you need something like multiple inheritance to work with?
a.	The first statement is false. Java does support multiple inheritance, like C++.
b.	You can not do anyting to achieve the desired results if you need something like multiple inheritance to work with.
c.	Your class will need to extend multiple classes to achieve the desired results.
d.	You will need to implement multiple interfaces and provide the desired implementations.

10.	Select the best possible answer related to the code given below

class SuperJavaQuiz {
 	public static void start(){
 		System.out.println("I am in SuperJavaQuiz class");
	}
}
public class MainQuiz extends SuperJavaQuiz {
 	public static void start(){
 		System.out.println("I am in Main class");
 	}
 	public static void main(String[] args) {
 		start();
 	}
}
a.	It will print “I am in SuperJavaQuiz class”, without the quotes
b.	It is an example of Inheritance where, the start() method is overridden.
c.	The start() method is not overridden but simply defind again separately in MainQuiz class scope.
d.	There will be a Compile-time Exception, because you can not override static methods.

11.	
